{
  "version": 3,
  "sources": ["../../motion-sensors-polyfill/sensor.js", "../../motion-sensors-polyfill/motion-sensors.js"],
  "sourcesContent": ["// @ts-check\nexport const __sensor__ = Symbol(\"__sensor__\");\n\nconst slot = __sensor__;\n\nfunction defineProperties(target, descriptions) {\n  for (const property in descriptions) {\n    Object.defineProperty(target, property, {\n      configurable: true,\n      value: descriptions[property]\n    });\n  }\n}\n\nexport const EventTargetMixin = (superclass, ...eventNames) => class extends superclass {\n  constructor(...args) {\n    // @ts-ignore\n    super(args);\n    const eventTarget = document.createDocumentFragment();\n\n    this.addEventListener = (type, ...args) => {\n      return eventTarget.addEventListener(type, ...args);\n    }\n\n    this.removeEventListener = (...args) => {\n      // @ts-ignore\n      return eventTarget.removeEventListener(...args);\n    }\n\n    this.dispatchEvent = (event) => {\n      defineProperties(event, { currentTarget: this });\n      if (!event.target) {\n        defineProperties(event, { target: this });\n      }\n\n      const methodName = `on${event.type}`;\n      if (typeof this[methodName] == \"function\") {\n          this[methodName](event);\n      }\n\n      const retValue = eventTarget.dispatchEvent(event);\n\n      if (retValue && this.parentNode) {\n        this.parentNode.dispatchEvent(event);\n      }\n\n      defineProperties(event, { currentTarget: null, target: null });\n\n      return retValue;\n    }\n  }\n};\n\nexport class EventTarget extends EventTargetMixin(Object) {};\n\nexport function defineReadonlyProperties(target, slot, descriptions) {\n  const propertyBag = target[slot];\n  for (const property in descriptions) {\n    propertyBag[property] = descriptions[property];\n    Object.defineProperty(target, property, {\n      get: () => propertyBag[property]\n    });\n  }\n}\n\nclass SensorErrorEvent extends Event {\n  constructor(type, errorEventInitDict) {\n    super(type, errorEventInitDict);\n\n    if (!errorEventInitDict || !(errorEventInitDict.error instanceof DOMException)) {\n      throw TypeError(\n        \"Failed to construct 'SensorErrorEvent':\" +\n        \"2nd argument much contain 'error' property\"\n      );\n    }\n\n    Object.defineProperty(this, \"error\", {\n      configurable: false,\n      writable: false,\n      value: errorEventInitDict.error\n    });\n  }\n};\n\nfunction defineOnEventListener(target, name) {\n  Object.defineProperty(target, `on${name}`, {\n    enumerable: true,\n    configurable: false,\n    writable: true,\n    value: null\n  });\n}\n\nconst SensorState = {\n  IDLE: 1,\n  ACTIVATING: 2,\n  ACTIVE: 3,\n}\n\nexport class Sensor extends EventTarget {\n  constructor(options) {\n    super();\n    this[slot] = new WeakMap;\n\n    defineOnEventListener(this, \"reading\");\n    defineOnEventListener(this, \"activate\");\n    defineOnEventListener(this, \"error\");\n\n    defineReadonlyProperties(this, slot, {\n      activated: false,\n      hasReading: false,\n      timestamp: null\n    })\n\n    this[slot].state = SensorState.IDLE;\n\n    this[slot].notifyError = (message, name) => {\n      let error = new SensorErrorEvent(\"error\", {\n        error: new DOMException(message, name)\n      });\n      this.dispatchEvent(error);\n      this.stop();\n    }\n\n    this[slot].notifyActivatedState = () => {\n      let activate = new Event(\"activate\");\n      this[slot].activated = true;\n      this.dispatchEvent(activate);\n      this[slot].state = SensorState.ACTIVE;\n    }\n\n    this[slot].activateCallback = () => {};\n    this[slot].deactivateCallback = () => {};\n\n    this[slot].frequency = null;\n\n    if (window && window.parent != window.top) {\n      throw new DOMException(\"Only instantiable in a top-level browsing context\", \"SecurityError\");\n    }\n\n    if (options && typeof(options.frequency) == \"number\") {\n      if (options.frequency > 60) {\n        this.frequency = options.frequency;\n      }\n    }\n  }\n\n  start() {\n    if (this[slot].state === SensorState.ACTIVATING || this[slot].state === SensorState.ACTIVE) {\n      return;\n    }\n    this[slot].state = SensorState.ACTIVATING;\n    this[slot].activateCallback();\n  }\n\n  stop() {\n    if (this[slot].state === SensorState.IDLE) {\n      return;\n    }\n    this[slot].activated = false;\n    this[slot].hasReading = false;\n    this[slot].timestamp = null;\n    this[slot].deactivateCallback();\n\n    this[slot].state = SensorState.IDLE;\n  }\n}", "// @ts-check\nimport { __sensor__, Sensor, defineReadonlyProperties } from \"./sensor.js\";\n\nconst slot = __sensor__;\n\nlet orientation;\n\n// @ts-ignore\nif (screen.orientation) {\n  // @ts-ignore\n  orientation = screen.orientation;\n} else if (screen.msOrientation) {\n  orientation = screen.msOrientation;\n} else {\n  orientation = {};\n  Object.defineProperty(orientation, \"angle\", {\n    get: () => { return (window.orientation || 0) }\n  });\n}\n\nconst DeviceOrientationMixin = (superclass, ...eventNames) => class extends superclass {\n  constructor(...args) {\n    // @ts-ignore\n    super(args);\n\n    for (const eventName of eventNames) {\n      if (`on${eventName}` in window) {\n        this[slot].eventName = eventName;\n        break;\n      }\n    }\n\n    this[slot].activateCallback = () => {\n      window.addEventListener(this[slot].eventName, this[slot].handleEvent, { capture: true });\n    }\n\n    this[slot].deactivateCallback = () => {\n      window.removeEventListener(this[slot].eventName, this[slot].handleEvent, { capture: true });\n    }\n  }\n};\n\nfunction toQuaternionFromEuler(alpha, beta, gamma) {\n  const degToRad = Math.PI / 180\n\n  const x = (beta || 0) * degToRad;\n  const y = (gamma || 0) * degToRad;\n  const z = (alpha || 0) * degToRad;\n\n  const cZ = Math.cos(z * 0.5);\n  const sZ = Math.sin(z * 0.5);\n  const cY = Math.cos(y * 0.5);\n  const sY = Math.sin(y * 0.5);\n  const cX = Math.cos(x * 0.5);\n  const sX = Math.sin(x * 0.5);\n\n  const qx = sX * cY * cZ - cX * sY * sZ;\n  const qy = cX * sY * cZ + sX * cY * sZ;\n  const qz = cX * cY * sZ + sX * sY * cZ;\n  const qw = cX * cY * cZ - sX * sY * sZ;\n\n  return [qx, qy, qz, qw];\n}\n\nfunction rotateQuaternionByAxisAngle(quat, axis, angle) {\n  const sHalfAngle = Math.sin(angle / 2);\n  const cHalfAngle = Math.cos(angle / 2);\n\n  const transformQuat = [\n    axis[0] * sHalfAngle,\n    axis[1] * sHalfAngle,\n    axis[2] * sHalfAngle,\n    cHalfAngle\n  ];\n\n  function multiplyQuaternion(a, b) {\n    const qx = a[0] * b[3] + a[3] * b[0] + a[1] * b[2] - a[2] * b[1];\n    const qy = a[1] * b[3] + a[3] * b[1] + a[2] * b[0] - a[0] * b[2];\n    const qz = a[2] * b[3] + a[3] * b[2] + a[0] * b[1] - a[1] * b[0];\n    const qw = a[3] * b[3] - a[0] * b[0] - a[1] * b[1] - a[2] * b[2];\n\n    return [qx, qy, qz, qw];\n  }\n\n  function normalizeQuaternion(quat) {\n    const length = Math.sqrt(quat[0] ** 2 + quat[1] ** 2 + quat[2] ** 2 + quat[3] ** 2);\n    if (length === 0) {\n      return [0, 0, 0, 1];\n    }\n\n    return quat.map(v => v / length);\n  }\n\n  return normalizeQuaternion(multiplyQuaternion(quat, transformQuat));\n}\n\nfunction toMat4FromQuat(mat, q) {\n  const typed = mat instanceof Float32Array || mat instanceof Float64Array;\n\n  if (typed && mat.length >= 16) {\n    mat[0] = 1 - 2 * (q[1] ** 2 + q[2] ** 2);\n    mat[1] = 2 * (q[0] * q[1] - q[2] * q[3]);\n    mat[2] = 2 * (q[0] * q[2] + q[1] * q[3]);\n    mat[3] = 0;\n\n    mat[4] = 2 * (q[0] * q[1] + q[2] * q[3]);\n    mat[5] = 1 - 2 * (q[0] ** 2 + q[2] ** 2);\n    mat[6] = 2 * (q[1] * q[2] - q[0] * q[3]);\n    mat[7] = 0;\n\n    mat[8] = 2 * (q[0] * q[2] - q[1] * q[3]);\n    mat[9] = 2 * (q[1] * q[2] + q[0] * q[3]);\n    mat[10] = 1 - 2 * (q[0] ** 2 + q[1] ** 2);\n    mat[11] = 0;\n\n    mat[12] = 0;\n    mat[13] = 0;\n    mat[14] = 0;\n    mat[15] = 1;\n  }\n\n  return mat;\n}\n\nfunction worldToScreen(quaternion) {\n  return !quaternion ? null :\n    rotateQuaternionByAxisAngle(\n      quaternion,\n      [0, 0, 1],\n      - orientation.angle * Math.PI / 180\n    );\n}\n\n// @ts-ignore\nexport const RelativeOrientationSensor = window.RelativeOrientationSensor ||\nclass RelativeOrientationSensor extends DeviceOrientationMixin(Sensor, \"deviceorientation\") {\n  constructor(options = {}) {\n    super(options);\n\n    switch (options.coordinateSystem || 'world') {\n      case 'screen':\n        Object.defineProperty(this, \"quaternion\", {\n          get: () => worldToScreen(this[slot].quaternion)\n        });\n        break;\n      case 'world':\n      default:\n        Object.defineProperty(this, \"quaternion\", {\n          get: () => this[slot].quaternion\n        });\n    }\n\n    this[slot].handleEvent = event => {\n      // If there is no sensor we will get values equal to null.\n      if (event.absolute || event.alpha === null) {\n        // Spec: The implementation can still decide to provide\n        // absolute orientation if relative is not available or\n        // the resulting data is more accurate. In either case,\n        // the absolute property must be set accordingly to reflect\n        // the choice.\n        this[slot].notifyError(\"Could not connect to a sensor\", \"NotReadableError\");\n        return;\n      }\n\n      if (!this[slot].activated) {\n        this[slot].notifyActivatedState();\n      }\n\n      this[slot].timestamp = performance.now();\n\n      this[slot].quaternion = toQuaternionFromEuler(\n        event.alpha,\n        event.beta,\n        event.gamma\n      );\n\n      this[slot].hasReading = true;\n      this.dispatchEvent(new Event(\"reading\"));\n    }\n\n    this[slot].deactivateCallback = () => {\n      this[slot].quaternion = null;\n    }\n  }\n\n  populateMatrix(mat) {\n    toMat4FromQuat(mat, this.quaternion);\n  }\n}\n\n// @ts-ignore\nexport const AbsoluteOrientationSensor = window.AbsoluteOrientationSensor ||\nclass AbsoluteOrientationSensor extends DeviceOrientationMixin(\n  Sensor, \"deviceorientationabsolute\", \"deviceorientation\") {\n  constructor(options = {}) {\n    super(options);\n\n    switch (options.coordinateSystem || 'world') {\n      case 'screen':\n        Object.defineProperty(this, \"quaternion\", {\n          get: () => worldToScreen(this[slot].quaternion)\n        });\n        break;\n      case 'world':\n      default:\n        Object.defineProperty(this, \"quaternion\", {\n          get: () => this[slot].quaternion\n        });\n    }\n\n    this[slot].handleEvent = event => {\n      // If absolute is set, or webkitCompassHeading exists,\n      // absolute values should be available.\n      const isAbsolute = event.absolute === true || \"webkitCompassHeading\" in event;\n      const hasValue = event.alpha !== null || event.webkitCompassHeading !== undefined;\n\n      if (!isAbsolute || !hasValue) {\n        // Spec: If an implementation can never provide absolute\n        // orientation information, the event should be fired with\n        // the alpha, beta and gamma attributes set to null.\n        this[slot].notifyError(\"Could not connect to a sensor\", \"NotReadableError\");\n        return;\n      }\n\n      if (!this[slot].activated) {\n        this[slot].notifyActivatedState();\n      }\n\n      this[slot].hasReading = true;\n      this[slot].timestamp = performance.now();\n\n      const heading = event.webkitCompassHeading != null ? 360 - event.webkitCompassHeading : event.alpha;\n\n      this[slot].quaternion = toQuaternionFromEuler(\n        heading,\n        event.beta,\n        event.gamma\n      );\n\n      this.dispatchEvent(new Event(\"reading\"));\n    }\n\n    this[slot].deactivateCallback = () => {\n      this[slot].quaternion = null;\n    }\n  }\n\n  populateMatrix(mat) {\n    toMat4FromQuat(mat, this.quaternion);\n  }\n}\n\n// @ts-ignore\nexport const Gyroscope = window.Gyroscope ||\nclass Gyroscope extends DeviceOrientationMixin(Sensor, \"devicemotion\") {\n  constructor(options) {\n    super(options);\n    this[slot].handleEvent = event => {\n      // If there is no sensor we will get values equal to null.\n      if (event.rotationRate.alpha === null) {\n        this[slot].notifyError(\"Could not connect to a sensor\", \"NotReadableError\");\n        return;\n      }\n\n      if (!this[slot].activated) {\n        this[slot].notifyActivatedState();\n      }\n\n      this[slot].timestamp = performance.now();\n\n      this[slot].x = event.rotationRate.alpha;\n      this[slot].y = event.rotationRate.beta;\n      this[slot].z = event.rotationRate.gamma;\n\n      this[slot].hasReading = true;\n      this.dispatchEvent(new Event(\"reading\"));\n    }\n\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null\n    });\n\n    this[slot].deactivateCallback = () => {\n      this[slot].x = null;\n      this[slot].y = null;\n      this[slot].z = null;\n    }\n  }\n}\n\n// @ts-ignore\nexport const Accelerometer = window.Accelerometer ||\nclass Accelerometer extends DeviceOrientationMixin(Sensor, \"devicemotion\") {\n  constructor(options) {\n    super(options);\n    this[slot].handleEvent = event => {\n      // If there is no sensor we will get values equal to null.\n      if (event.accelerationIncludingGravity.x === null) {\n        this[slot].notifyError(\"Could not connect to a sensor\", \"NotReadableError\");\n        return;\n      }\n\n      if (!this[slot].activated) {\n        this[slot].notifyActivatedState();\n      }\n\n      this[slot].timestamp = performance.now();\n\n      this[slot].x = event.accelerationIncludingGravity.x;\n      this[slot].y = event.accelerationIncludingGravity.y;\n      this[slot].z = event.accelerationIncludingGravity.z;\n\n      this[slot].hasReading = true;\n      this.dispatchEvent(new Event(\"reading\"));\n    }\n\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null\n    });\n\n    this[slot].deactivateCallback = () => {\n      this[slot].x = null;\n      this[slot].y = null;\n      this[slot].z = null;\n    }\n  }\n}\n\n// @ts-ignore\nexport const LinearAccelerationSensor = window.LinearAccelerationSensor ||\nclass LinearAccelerationSensor extends DeviceOrientationMixin(Sensor, \"devicemotion\") {\n  constructor(options) {\n    super(options);\n    this[slot].handleEvent = event => {\n      // If there is no sensor we will get values equal to null.\n      if (event.acceleration.x === null) {\n        this[slot].notifyError(\"Could not connect to a sensor\", \"NotReadableError\");\n        return;\n      }\n\n      if (!this[slot].activated) {\n        this[slot].notifyActivatedState();\n      }\n\n      this[slot].timestamp = performance.now();\n\n      this[slot].x = event.acceleration.x;\n      this[slot].y = event.acceleration.y;\n      this[slot].z = event.acceleration.z;\n\n      this[slot].hasReading = true;\n      this.dispatchEvent(new Event(\"reading\"));\n    }\n\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null\n    });\n\n    this[slot].deactivateCallback = () => {\n      this[slot].x = null;\n      this[slot].y = null;\n      this[slot].z = null;\n    }\n  }\n}\n\n// @ts-ignore\nexport const GravitySensor = window.GravitySensor ||\n class GravitySensor extends DeviceOrientationMixin(Sensor, \"devicemotion\") {\n  constructor(options) {\n    super(options);\n    this[slot].handleEvent = event => {\n      // If there is no sensor we will get values equal to null.\n      if (event.acceleration.x === null || event.accelerationIncludingGravity.x === null) {\n        this[slot].notifyError(\"Could not connect to a sensor\", \"NotReadableError\");\n        return;\n      }\n\n      if (!this[slot].activated) {\n        this[slot].notifyActivatedState();\n      }\n\n      this[slot].timestamp = performance.now();\n\n      this[slot].x = event.accelerationIncludingGravity.x - event.acceleration.x;\n      this[slot].y = event.accelerationIncludingGravity.y - event.acceleration.y;\n      this[slot].z = event.accelerationIncludingGravity.z - event.acceleration.z;\n\n      this[slot].hasReading = true;\n      this.dispatchEvent(new Event(\"reading\"));\n    }\n\n    defineReadonlyProperties(this, slot, {\n      x: null,\n      y: null,\n      z: null\n    });\n\n    this[slot].deactivateCallback = () => {\n      this[slot].x = null;\n      this[slot].y = null;\n      this[slot].z = null;\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["args", "slot", "slot", "quat", "RelativeOrientationSensor", "AbsoluteOrientationSensor", "Gyroscope", "Accelerometer", "LinearAccelerationSensor", "GravitySensor"]
}
